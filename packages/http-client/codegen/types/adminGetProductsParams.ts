/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Medusa API
 * OpenAPI spec version: 1.0.0
 */
import type { AdminGetProductsStatusOneOfItem } from './adminGetProductsStatusOneOfItem';
import type { AdminGetProductsCreatedAtAndItem } from './adminGetProductsCreatedAtAndItem';
import type { AdminGetProductsCreatedAtEq } from './adminGetProductsCreatedAtEq';
import type { AdminGetProductsCreatedAtNot } from './adminGetProductsCreatedAtNot';
import type { AdminGetProductsCreatedAtOrItem } from './adminGetProductsCreatedAtOrItem';
import type { AdminGetProductsUpdatedAtAndItem } from './adminGetProductsUpdatedAtAndItem';
import type { AdminGetProductsUpdatedAtEq } from './adminGetProductsUpdatedAtEq';
import type { AdminGetProductsUpdatedAtNot } from './adminGetProductsUpdatedAtNot';
import type { AdminGetProductsUpdatedAtOrItem } from './adminGetProductsUpdatedAtOrItem';
import type { AdminGetProductsDeletedAtAndItem } from './adminGetProductsDeletedAtAndItem';
import type { AdminGetProductsDeletedAtEq } from './adminGetProductsDeletedAtEq';
import type { AdminGetProductsDeletedAtNot } from './adminGetProductsDeletedAtNot';
import type { AdminGetProductsDeletedAtOrItem } from './adminGetProductsDeletedAtOrItem';
import type { AdminGetProductsAndItem } from './adminGetProductsAndItem';
import type { AdminGetProductsOrItem } from './adminGetProductsOrItem';
import type { AdminGetProductsVariantsAndItem } from './adminGetProductsVariantsAndItem';
import type { AdminGetProductsVariantsOrItem } from './adminGetProductsVariantsOrItem';
import type { AdminGetProductsVariantsCreatedAt } from './adminGetProductsVariantsCreatedAt';
import type { AdminGetProductsVariantsDeletedAt } from './adminGetProductsVariantsDeletedAt';
import type { AdminGetProductsVariantsId } from './adminGetProductsVariantsId';
import type { AdminGetProductsVariantsUpdatedAt } from './adminGetProductsVariantsUpdatedAt';

export type AdminGetProductsParams = {
/**
 * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
 */
fields?: string;
/**
 * The number of items to skip when retrieving a list.
 */
offset?: number;
/**
 * Limit the number of items returned in the list.
 */
limit?: number;
/**
 * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
 */
order?: string;
price_list_id?: string | string[];
/**
 * Search term to filter a product's searchable properties.
 */
q?: string;
status?: string | AdminGetProductsStatusOneOfItem[];
sales_channel_id?: string | string[];
title?: string | string[];
handle?: string | string[];
id?: string | string[];
/**
 * Filter by whether a product is a gift card.
 */
is_giftcard?: boolean;
/**
 * Filter by associated tags to retrieve their products.
 */
tags?: {
  /** Filter by tag values. */
  value?: string[];
};
type_id?: string | string[];
category_id?: string | string[];
/**
 * Filter by a product's creation date.
 */
created_at?: {
  /** Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters. */
  $and?: AdminGetProductsCreatedAtAndItem[];
  /** Filter arrays that contain all values of this parameter. */
  $contained?: string[];
  /** Filter arrays that contain some of the values of this parameter. */
  $contains?: string[];
  $eq?: AdminGetProductsCreatedAtEq;
  /** Filter by whether a value for this parameter exists (not `null`). */
  $exists?: boolean;
  /** Filter to apply on full-text properties. */
  $fulltext?: string;
  /** Filter by values greater than this parameter. Useful for numbers and dates only. */
  $gt?: string;
  /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
  $gte?: string;
  /** Apply a case-insensitive `like` filter. Useful for strings only. */
  $ilike?: string;
  /** Filter by values in this array. */
  $in?: string[];
  /** Apply a `like` filter. Useful for strings only. */
  $like?: string;
  /** Filter by values less than this parameter. Useful for numbers and dates only. */
  $lt?: string;
  /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
  $lte?: string;
  /** Filter by values not equal to this parameter. */
  $ne?: string;
  /** Filter by values not in this array. */
  $nin?: string[];
  $not?: AdminGetProductsCreatedAtNot;
  /** Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters. */
  $or?: AdminGetProductsCreatedAtOrItem[];
  /** Filter arrays that have overlapping values with this parameter. */
  $overlap?: string[];
  /** Apply a regex filter. Useful for strings only. */
  $re?: string;
};
/**
 * Filter by a product's update date.
 */
updated_at?: {
  /** Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters. */
  $and?: AdminGetProductsUpdatedAtAndItem[];
  /** Filter arrays that contain all values of this parameter. */
  $contained?: string[];
  /** Filter arrays that contain some of the values of this parameter. */
  $contains?: string[];
  $eq?: AdminGetProductsUpdatedAtEq;
  /** Filter by whether a value for this parameter exists (not `null`). */
  $exists?: boolean;
  /** Filter to apply on full-text properties. */
  $fulltext?: string;
  /** Filter by values greater than this parameter. Useful for numbers and dates only. */
  $gt?: string;
  /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
  $gte?: string;
  /** Apply a case-insensitive `like` filter. Useful for strings only. */
  $ilike?: string;
  /** Filter by values in this array. */
  $in?: string[];
  /** Apply a `like` filter. Useful for strings only. */
  $like?: string;
  /** Filter by values less than this parameter. Useful for numbers and dates only. */
  $lt?: string;
  /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
  $lte?: string;
  /** Filter by values not equal to this parameter. */
  $ne?: string;
  /** Filter by values not in this array. */
  $nin?: string[];
  $not?: AdminGetProductsUpdatedAtNot;
  /** Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters. */
  $or?: AdminGetProductsUpdatedAtOrItem[];
  /** Filter arrays that have overlapping values with this parameter. */
  $overlap?: string[];
  /** Apply a regex filter. Useful for strings only. */
  $re?: string;
};
/**
 * Filter by a product's deletion date.
 */
deleted_at?: {
  /** Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters. */
  $and?: AdminGetProductsDeletedAtAndItem[];
  /** Filter arrays that contain all values of this parameter. */
  $contained?: string[];
  /** Filter arrays that contain some of the values of this parameter. */
  $contains?: string[];
  $eq?: AdminGetProductsDeletedAtEq;
  /** Filter by whether a value for this parameter exists (not `null`). */
  $exists?: boolean;
  /** Filter to apply on full-text properties. */
  $fulltext?: string;
  /** Filter by values greater than this parameter. Useful for numbers and dates only. */
  $gt?: string;
  /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
  $gte?: string;
  /** Apply a case-insensitive `like` filter. Useful for strings only. */
  $ilike?: string;
  /** Filter by values in this array. */
  $in?: string[];
  /** Apply a `like` filter. Useful for strings only. */
  $like?: string;
  /** Filter by values less than this parameter. Useful for numbers and dates only. */
  $lt?: string;
  /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
  $lte?: string;
  /** Filter by values not equal to this parameter. */
  $ne?: string;
  /** Filter by values not in this array. */
  $nin?: string[];
  $not?: AdminGetProductsDeletedAtNot;
  /** Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters. */
  $or?: AdminGetProductsDeletedAtOrItem[];
  /** Filter arrays that have overlapping values with this parameter. */
  $overlap?: string[];
  /** Apply a regex filter. Useful for strings only. */
  $re?: string;
};
/**
 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
 */
$and?: AdminGetProductsAndItem[];
/**
 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
 */
$or?: AdminGetProductsOrItem[];
collection_id?: string | string[];
/**
 * Filter the retrieved products' variants.
 */
variants?: {
  /** Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters. */
  $and?: AdminGetProductsVariantsAndItem[];
  /** Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters. */
  $or?: AdminGetProductsVariantsOrItem[];
  /** Filter by whether the variant can be ordered even if it's out of stock. */
  allow_backorder?: boolean;
  /** Filter by the variant's creation date. */
  created_at?: AdminGetProductsVariantsCreatedAt;
  /** The variant's deleted at. */
  deleted_at?: AdminGetProductsVariantsDeletedAt;
  /** Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. */
  fields?: string;
  id?: AdminGetProductsVariantsId;
  /** Limit the number of items returned in the list. */
  limit?: number;
  /** Filter by whether the Medusa application manages the variant's inventory. */
  manage_inventory?: boolean;
  /** The number of items to skip when retrieving a list. */
  offset?: number;
  /** The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`. */
  order?: string;
  /** Search term to apply on the variant's searchable properties. */
  q?: string;
  /** The variant's updated at. */
  updated_at?: AdminGetProductsVariantsUpdatedAt;
};
};
