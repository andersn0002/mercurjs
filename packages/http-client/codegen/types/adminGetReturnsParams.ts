/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Medusa API
 * OpenAPI spec version: 1.0.0
 */
import type { AdminGetReturnsAndItem } from './adminGetReturnsAndItem';
import type { AdminGetReturnsOrItem } from './adminGetReturnsOrItem';
import type { AdminGetReturnsFulfillmentStatusItem } from './adminGetReturnsFulfillmentStatusItem';
import type { AdminGetReturnsPaymentStatusItem } from './adminGetReturnsPaymentStatusItem';
import type { AdminGetReturnsCreatedAtAndItem } from './adminGetReturnsCreatedAtAndItem';
import type { AdminGetReturnsCreatedAtEq } from './adminGetReturnsCreatedAtEq';
import type { AdminGetReturnsCreatedAtNot } from './adminGetReturnsCreatedAtNot';
import type { AdminGetReturnsCreatedAtOrItem } from './adminGetReturnsCreatedAtOrItem';
import type { AdminGetReturnsUpdatedAtAndItem } from './adminGetReturnsUpdatedAtAndItem';
import type { AdminGetReturnsUpdatedAtEq } from './adminGetReturnsUpdatedAtEq';
import type { AdminGetReturnsUpdatedAtNot } from './adminGetReturnsUpdatedAtNot';
import type { AdminGetReturnsUpdatedAtOrItem } from './adminGetReturnsUpdatedAtOrItem';

export type AdminGetReturnsParams = {
/**
 * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
 */
fields?: string;
/**
 * The number of items to skip when retrieving a list.
 */
offset?: number;
/**
 * Limit the number of items returned in the list.
 */
limit?: number;
/**
 * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
 */
order?: string;
id?: string | string[];
status?: string | string[];
/**
 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
 */
$and?: AdminGetReturnsAndItem[];
/**
 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
 */
$or?: AdminGetReturnsOrItem[];
/**
 * Filter by sales channel IDs to retrieve their associated returns.
 */
sales_channel_id?: string[];
/**
 * Filter by fulfillment statuses.
 */
fulfillment_status?: AdminGetReturnsFulfillmentStatusItem[];
/**
 * Filter by payment statuses.
 */
payment_status?: AdminGetReturnsPaymentStatusItem[];
/**
 * Filter by region IDs to retrieve their associated returns.
 */
region_id?: string | string[];
/**
 * Search term to filter the return's searchable properties.
 */
q?: string;
/**
 * Filter by the return's creation date.
 */
created_at?: {
  /** Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters. */
  $and?: AdminGetReturnsCreatedAtAndItem[];
  /** Filter arrays that contain all values of this parameter. */
  $contained?: string[];
  /** Filter arrays that contain some of the values of this parameter. */
  $contains?: string[];
  $eq?: AdminGetReturnsCreatedAtEq;
  /** Filter by whether a value for this parameter exists (not `null`). */
  $exists?: boolean;
  /** Filter to apply on full-text properties. */
  $fulltext?: string;
  /** Filter by values greater than this parameter. Useful for numbers and dates only. */
  $gt?: string;
  /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
  $gte?: string;
  /** Apply a case-insensitive `like` filter. Useful for strings only. */
  $ilike?: string;
  /** Filter by values in this array. */
  $in?: string[];
  /** Apply a `like` filter. Useful for strings only. */
  $like?: string;
  /** Filter by values less than this parameter. Useful for numbers and dates only. */
  $lt?: string;
  /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
  $lte?: string;
  /** Filter by values not equal to this parameter. */
  $ne?: string;
  /** Filter by values not in this array. */
  $nin?: string[];
  $not?: AdminGetReturnsCreatedAtNot;
  /** Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters. */
  $or?: AdminGetReturnsCreatedAtOrItem[];
  /** Filter arrays that have overlapping values with this parameter. */
  $overlap?: string[];
  /** Apply a regex filter. Useful for strings only. */
  $re?: string;
};
/**
 * Filter by the return's update date.
 */
updated_at?: {
  /** Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters. */
  $and?: AdminGetReturnsUpdatedAtAndItem[];
  /** Filter arrays that contain all values of this parameter. */
  $contained?: string[];
  /** Filter arrays that contain some of the values of this parameter. */
  $contains?: string[];
  $eq?: AdminGetReturnsUpdatedAtEq;
  /** Filter by whether a value for this parameter exists (not `null`). */
  $exists?: boolean;
  /** Filter to apply on full-text properties. */
  $fulltext?: string;
  /** Filter by values greater than this parameter. Useful for numbers and dates only. */
  $gt?: string;
  /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
  $gte?: string;
  /** Apply a case-insensitive `like` filter. Useful for strings only. */
  $ilike?: string;
  /** Filter by values in this array. */
  $in?: string[];
  /** Apply a `like` filter. Useful for strings only. */
  $like?: string;
  /** Filter by values less than this parameter. Useful for numbers and dates only. */
  $lt?: string;
  /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
  $lte?: string;
  /** Filter by values not equal to this parameter. */
  $ne?: string;
  /** Filter by values not in this array. */
  $nin?: string[];
  $not?: AdminGetReturnsUpdatedAtNot;
  /** Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters. */
  $or?: AdminGetReturnsUpdatedAtOrItem[];
  /** Filter arrays that have overlapping values with this parameter. */
  $overlap?: string[];
  /** Apply a regex filter. Useful for strings only. */
  $re?: string;
};
customer_id?: string | string[];
};
